diff --git a/src/OpenCvSharpExtern/CMakeLists.txt b/src/OpenCvSharpExtern/CMakeLists.txt
index 4371d2f6..13eedf05 100644
--- a/src/OpenCvSharpExtern/CMakeLists.txt
+++ b/src/OpenCvSharpExtern/CMakeLists.txt
@@ -1,50 +1,50 @@
-cmake_minimum_required(VERSION 3.0)
+cmake_minimum_required(VERSION 3.10)
 
 include_directories(${OpenCV_INCLUDE_DIR})
 IF(!EMSCRIPTEN)
-	link_directories(${OpenCV_LIBRARY_DIR} ${OpenCV_LIBRARIES})
+    link_directories(${OpenCV_LIBRARY_DIR} ${OpenCV_LIBRARIES})
 ENDIF()
 IF(APPLE)
     # Fix linking on 10.14+. See https://stackoverflow.com/questions/54068035
     link_directories(/usr/local/lib)
 ENDIF()
 
-file(GLOB OPENCVSHARP_FILES *.cpp)
+file(GLOB OPENCVSHARP_FILES core*.cpp imgp*.cpp imgc*.cpp videoio*.cpp std*.cpp)
 
 find_package(OpenCV REQUIRED)
 
-# iconv support isn't automatic on some systems
-if(CMAKE_VERSION VERSION_GREATER "3.11")
-  find_package(Iconv QUIET)
-  if(Iconv_FOUND)
-    ocv_target_link_libraries(${the_module} Iconv::Iconv)
-  else()
-    ocv_target_compile_definitions(${the_module} PRIVATE "NO_ICONV=1")
-  endif()
-endif()
-
 if(OpenCV_FOUND)
-	include_directories(${OpenCV_INCLUDE_DIRS})
-	#set(LIBS ${LIBS} ${OpenCV_LIBRARIES})
-
-	if(CMAKE_GENERATOR MATCHES "Visual Studio")
-		set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /MT")
-		set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /MTd")
-		
-		set(CMAKE_CXX_STANDARD_LIBRARIES "${CMAKE_CXX_STANDARD_LIBRARIES} kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib")
-	endif()
-
-	if(EMSCRIPTEN)
-		# TODO: replace path
-		add_library(OpenCvSharpExtern STATIC ${OPENCVSHARP_FILES} ${WASM_LIB})
-	else()
-		add_library(OpenCvSharpExtern SHARED ${OPENCVSHARP_FILES})
-		target_link_libraries(OpenCvSharpExtern ${OpenCV_LIBRARIES})
-	endif()
-
-	install(TARGETS OpenCvSharpExtern
+    include_directories(${OpenCV_INCLUDE_DIRS})
+    #set(LIBS ${LIBS} ${OpenCV_LIBRARIES})
+
+    if(CMAKE_GENERATOR MATCHES "Visual Studio")
+        set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /MT")
+        set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /MTd")
+        
+        set(CMAKE_CXX_STANDARD_LIBRARIES "${CMAKE_CXX_STANDARD_LIBRARIES} kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib")
+    endif()
+
+    if(EMSCRIPTEN)
+        # TODO: replace path
+        add_library(OpenCvSharpExtern STATIC ${OPENCVSHARP_FILES} ${WASM_LIB})
+    else()
+        add_library(OpenCvSharpExtern SHARED ${OPENCVSHARP_FILES})
+        target_link_libraries(OpenCvSharpExtern ${OpenCV_LIBRARIES})
+    endif()
+
+    # iconv support isn't automatic on some systems
+    if(CMAKE_VERSION VERSION_GREATER "3.11")
+      find_package(Iconv QUIET)
+      if(Iconv_FOUND)
+        target_link_libraries(OpenCvSharpExtern Iconv::Iconv)
+      else()
+        target_compile_definitions(OpenCvSharpExtern PRIVATE "NO_ICONV=1")
+      endif()
+    endif()
+
+    install(TARGETS OpenCvSharpExtern
         RUNTIME DESTINATION bin
         LIBRARY DESTINATION lib
         ARCHIVE DESTINATION lib/static
-	)
+    )
 endif(OpenCV_FOUND)
diff --git a/src/OpenCvSharpExtern/include_opencv.h b/src/OpenCvSharpExtern/include_opencv.h
index d65eb67e..e0f3e560 100644
--- a/src/OpenCvSharpExtern/include_opencv.h
+++ b/src/OpenCvSharpExtern/include_opencv.h
@@ -39,35 +39,7 @@
 #include <opencv2/highgui/highgui_winrt.hpp>
 #endif
 #include <opencv2/core/utils/logger.hpp>
-#include <opencv2/highgui/highgui_c.h>
 #include <opencv2/imgproc/imgproc_c.h>
-#include <opencv2/shape.hpp>
-#include <opencv2/stitching.hpp>
-#include <opencv2/video.hpp>
-#ifndef _WINRT_DLL
-#include <opencv2/superres.hpp>
-#include <opencv2/superres/optical_flow.hpp>
-#endif
-
-// opencv_contrib
-#include <opencv2/aruco.hpp>
-#include <opencv2/aruco/charuco.hpp>
-#include <opencv2/bgsegm.hpp>
-#include <opencv2/img_hash.hpp>
-#include <opencv2/line_descriptor.hpp>
-#include <opencv2/optflow.hpp>
-#include <opencv2/quality.hpp>
-#include <opencv2/tracking.hpp>
-#include <opencv2/xfeatures2d.hpp>
-#include <opencv2/ximgproc.hpp>
-#include <opencv2/xphoto.hpp>
-#ifndef _WINRT_DLL
-#include <opencv2/wechat_qrcode.hpp>
-#include <opencv2/dnn.hpp>
-#include <opencv2/dnn_superres.hpp>
-#include <opencv2/face.hpp>
-#include <opencv2/text.hpp>
-#endif
 
 #include <vector>
 #include <algorithm>
diff --git a/src/OpenCvSharpExtern/std_vector.h b/src/OpenCvSharpExtern/std_vector.h
index b0699d03..2101b34b 100644
--- a/src/OpenCvSharpExtern/std_vector.h
+++ b/src/OpenCvSharpExtern/std_vector.h
@@ -447,139 +447,3 @@ CVAPI(void) vector_Mat_delete(std::vector<cv::Mat>* vector)
     delete vector;
 }
 #pragma endregion
-
-#pragma region cv::ml::DTrees::Node
-
-CVAPI(std::vector<cv::ml::DTrees::Node>*) vector_DTrees_Node_new1()
-{
-    return new std::vector<cv::ml::DTrees::Node>;
-}
-
-CVAPI(size_t) vector_DTrees_Node_getSize(std::vector<cv::ml::DTrees::Node> *vector)
-{
-    return vector->size();
-}
-
-CVAPI(cv::ml::DTrees::Node*) vector_DTrees_Node_getPointer(std::vector<cv::ml::DTrees::Node> *vector)
-{
-    return &(vector->at(0));
-}
-
-CVAPI(void) vector_DTrees_Node_delete(std::vector<cv::ml::DTrees::Node> *vector)
-{
-    delete vector;
-}
-
-#pragma endregion
-
-#pragma region cv::ml::DTrees::Split
-
-CVAPI(std::vector<cv::ml::DTrees::Split>*) vector_DTrees_Split_new1()
-{
-    return new std::vector<cv::ml::DTrees::Split>;
-}
-
-CVAPI(size_t) vector_DTrees_Split_getSize(std::vector<cv::ml::DTrees::Split> *vector)
-{
-    return vector->size();
-}
-
-CVAPI(cv::ml::DTrees::Split*) vector_DTrees_Split_getPointer(std::vector<cv::ml::DTrees::Split> *vector)
-{
-    return &(vector->at(0));
-}
-
-CVAPI(void) vector_DTrees_Split_delete(std::vector<cv::ml::DTrees::Split> *vector)
-{
-    delete vector;
-}
-
-#pragma endregion
-
-#pragma region cv::detail::ImageFeatures
-
-CVAPI(std::vector<cv::detail::ImageFeatures>*) vector_ImageFeatures_new1()
-{
-    return new std::vector<cv::detail::ImageFeatures>;
-}
-
-CVAPI(size_t) vector_ImageFeatures_getSize(
-    std::vector<cv::detail::ImageFeatures>* vector)
-{
-    return vector->size();
-}
-
-CVAPI(void) vector_ImageFeatures_getKeypointsSize(
-    std::vector<cv::detail::ImageFeatures>* vector, size_t *dst)
-{
-    for (size_t i = 0; i < vector->size(); i++) 
-    {
-        dst[i] = vector->at(i).keypoints.size();
-    }
-}
-
-CVAPI(void) vector_ImageFeatures_getElements(
-    std::vector<cv::detail::ImageFeatures>* vector, detail_ImageFeatures* dstArray)
-{
-    for (size_t i = 0; i < vector->size(); i++)
-    {
-        const auto &src = vector->at(i);
-        auto &dst = dstArray[i];
-        dst.img_idx = src.img_idx;
-        dst.img_size = c(src.img_size);
-        //std::memcpy(dst.keypoints, &src.keypoints[0], sizeof(cv::KeyPoint)*src.keypoints.size());
-        std::copy(src.keypoints.begin(), src.keypoints.end(), std::back_inserter(*dst.keypoints));
-        src.descriptors.copyTo(*dst.descriptors);
-    }
-}
-
-CVAPI(void) vector_ImageFeatures_delete(std::vector<cv::detail::ImageFeatures>* vector)
-{
-    delete vector;
-}
-
-#pragma endregion
-
-#pragma region cv::line_descriptor::KeyLine
-#if 0
-CVAPI(std::vector<cv::line_descriptor::KeyLine>*) vector_KeyLine_new1()
-{
-    return new std::vector<cv::line_descriptor::KeyLine>;
-}
-
-CVAPI(size_t) vector_KeyLine_getSize(std::vector<cv::line_descriptor::KeyLine>* vector)
-{
-    return vector->size();
-}
-
-/*
-CVAPI(void) vector_KeyLine_getElements(
-    std::vector<cv::line_descriptor::KeyLine>* vector, line_descriptor_KeyLine* dst)
-{
-    for (size_t i = 0; i < vector->size(); i++)
-    {
-        const auto &k = vector->at(i);
-        const line_descriptor_KeyLine kl{
-            k.angle, k.class_id, k.octave,
-            {k.pt.x, k.pt.y},
-            k.response,  k.size,
-            k.startPointX, k.startPointY,
-            k.endPointX, k.endPointY,
-            k.sPointInOctaveX, k.sPointInOctaveY,
-            k.ePointInOctaveX, k.ePointInOctaveY,
-            k.lineLength, k.numOfPixels };
-        dst[i] = kl;
-    }
-}*/
-
-CVAPI(cv::line_descriptor::KeyLine*) vector_KeyLine_getPointer(std::vector<cv::line_descriptor::KeyLine>* vector)
-{
-    return &(vector->at(0));
-}
-
-CVAPI(void) vector_KeyLine_delete(std::vector<cv::line_descriptor::KeyLine>* vector)
-{
-    delete vector;
-}
-#endif
-#pragma endregion
\ No newline at end of file
