name: Build-OpenCvSharp

on:
  push:
    branches: 
      - feature/docker
    paths: 
      - .github/workflows/opencvsharp.yml
      - 'eng/opencvsharp.patch'
  workflow_dispatch:

env:
  OPENCVSHARP_VERSION: 4.11.0.20250507

jobs:
  build:
    name: Build
    runs-on: ${{ matrix.runs-on }}
    defaults:
      run:
        shell: bash

    strategy:
      matrix:
        include:
        - { os: ubuntu.22.04, arch: x64,   runs-on: ubuntu-22.04 }
        - { os: ubuntu.22.04, arch: arm64, runs-on: ubuntu-22.04-arm }
        - { os: win,          arch: x64,   runs-on: windows-2022 }
        - { os: win,          arch: x86,   runs-on: windows-2022 }
        - { os: win,          arch: arm64, runs-on: windows-11-arm }
        # - { os: osx,          arch: x64,   runs-on: macos-13 }
        # - { os: osx,          arch: arm64, runs-on: macos-14 }
        - { os: android,      arch: arm64, runs-on: ubuntu-22.04 }
        - { os: android,      arch: x64,   runs-on: ubuntu-22.04 }

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Download OpenCV Artifacts
      env:  
        GH_TOKEN: ${{ github.token }}  
      run: |  
        echo "Fetching latest run of opencv.yml on branch ${{ github.ref_name }}"  
        RUN_ID=$(gh run list -R ${{ github.repository }} --workflow=opencv.yml --branch=${{ github.ref_name }} --status=success --limit=1 --json databaseId | jq -r '.[0].databaseId')  
        echo "Latest opencv run ID: $RUN_ID"  
          
        echo "Downloading artifact 'opencv' from run ${RUN_ID}"  
        gh run download -R ${{ github.repository }} $RUN_ID --name opencv-${{ matrix.os }}-${{ matrix.arch }} --dir opencv

        echo "::group::OpenCV Artifacts"
        ls -lR opencv
        echo "::endgroup::"

    - name: Checkout OpenCvSharp
      uses: actions/checkout@v4
      with: 
        repository: shimat/opencvsharp
        ref: ${{ env.OPENCVSHARP_VERSION }}
        path: opencvsharp

    - name: Apply Patches
      run: |
        cd opencvsharp
        git apply --ignore-whitespace ../eng/opencvsharp.patch
        
    - name: Install Dependencies
      run: |
        if [[ "${{ matrix.os }}" =~ ^ubuntu || "${{ matrix.os }}" == "android" ]]; then
          script=$(
            cat <<'EOS'
            set -eux
            sudo apt update
            sudo apt install -y libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev gstreamer1.0-plugins-good libunwind-dev
        EOS
          )
        elif [[ "${{ matrix.os }}" == "osx" ]]; then
          script=$(
            cat <<'EOS'
            set -eux
            brew update
        EOS
          )
        elif [[ "${{ matrix.os }}" == "win" ]]; then
          script=$(
            cat <<'EOS'
            set -eux
        EOS
        )
        fi
        
        bash -c "$script"


    - name: Configure OpenCvSharp
      run: |
        script=$(
          cat <<'EOS'
          set -eux

          set --
          OpenCV_DIR="${{ github.workspace }}/opencv/lib/cmake/opencv4"

          if [[ "${{ matrix.os }}" =~ ^win ]]; then
            OpenCV_DIR="${{ github.workspace }}/opencv/${{ matrix.arch }}/vc17/staticlib"
            if [[ "${{ matrix.arch }}" == "x86" ]]; then
              set -- "$@" -A Win32
            fi

          elif [[ "${{ matrix.image }}" =~ ^oraclelinux ]]; then
            OpenCV_DIR="${{ github.workspace }}/opencv/lib64/cmake/opencv4"
            if [[ ${{ matrix.os }} == "centos.7" ]]; then
              ln -s /usr/bin/cmake3 /usr/bin/cmake
            fi

          elif [[ "${{ matrix.os }}" =~ ^alpine ]]; then
            set -- "$@" "-DCMAKE_SHARED_LINKER_FLAGS=-static-libstdc++ -static-libgcc"

          elif [[ ${{ matrix.os }} == "android" ]]; then
            OpenCV_DIR="${{ github.workspace }}/opencv/sdk/native/jni"
            set -- "$@" \
                "-DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK/build/cmake/android.toolchain.cmake" \
                "-DANDROID_PLATFORM=android-24" \
                "-DANDROID_STL=c++_static"
          
            if [[ "${{ matrix.arch }}" == "arm64" ]]; then
              set -- "$@" "-DANDROID_ABI=arm64-v8a"
            elif [[ "${{ matrix.arch }}" == "x64" ]]; then
              set -- "$@" "-DANDROID_ABI=x86_64"
            fi
          fi

          cd opencvsharp && mkdir build && cd build
          cmake \
            -D CMAKE_INSTALL_PREFIX="${{ github.workspace }}/opencvsharp/build" \
            -D OpenCV_DIR="$OpenCV_DIR" \
            "$@" \
            ../src
        EOS
        )

        if [[ "${{ matrix.image }}" == "" ]]; then
          bash -c "$script"
        else
          docker exec builder /bin/sh -c "$script"
        fi

    - name: Build OpenCvSharp
      run: |
        script=$(
          cat <<'EOS'
          set -eux
          cd opencvsharp/build
          if [[ "${{ matrix.os }}" =~ ^win ]]; then
            cmake --build . --parallel --config Release
          else
            make -j$(nproc)
          fi
        EOS
        )

        if [[ "${{ matrix.image }}" == "" ]]; then
          bash -c "$script"
        else
          docker exec builder /bin/sh -c "$script"
        fi

    - name: Strip OpenCvSharpExtern
      run: |
        script=$(
          cat <<'EOS'
          set -eux
          cd opencvsharp/build
          BIN="OpenCvSharpExtern/libOpenCvSharpExtern.so"
  
          if [[ "${{ matrix.os }}" =~ ^win ]]; then
            BIN="OpenCvSharpExtern/Release/OpenCvSharpExtern.dll"
            llvm-objcopy --strip-all "$BIN"
          elif [[ "${{ matrix.os }}" =~ ^osx ]]; then
            BIN="OpenCvSharpExtern/libOpenCvSharpExtern.dylib"
            strip -x "$BIN"
          elif [[ "${{ matrix.os }}" == "android" ]]; then
            $ANDROID_NDK/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-strip --strip-unneeded "$BIN"
          else        # Linux
            strip --strip-unneeded "$BIN"
          fi

          echo "Size after strip:"
          du -h "$BIN"
        EOS
        )

        if [[ "${{ matrix.image }}" == "" ]]; then
          bash -c "$script"
        else
          docker exec builder /bin/sh -c "$script"
        fi

    - name: Show OpenCvSharp Artifacts
      run: |
        cd opencvsharp/build
        echo "::group::OpenCvSharp Artifacts"
        ls -lR
        echo "::endgroup::"

        case "${{ matrix.os }}" in
          android)
            $ANDROID_NDK/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-readelf -d OpenCvSharpExtern/libOpenCvSharpExtern.so | grep NEEDED
            ;;
          win)
            echo "Can't show dependencies for Windows DLLs"
            ;;
          osx*)
            otool -L OpenCvSharpExtern/libOpenCvSharpExtern.dylib
            ;;
          *) # Linux
            ldd OpenCvSharpExtern/libOpenCvSharpExtern.so
            ;;
        esac

    - name: Make artifacts
      run: |
        mkdir artifacts && cd artifacts && mkdir lib test
        if [[ "${{ matrix.os }}" =~ ^win ]]; then
          cp -r ../opencvsharp/build/OpenCvSharpExtern/Release/OpenCvSharpExtern.* ./lib
        else
          cp -r ../opencvsharp/build/OpenCvSharpExtern/libOpenCvSharpExtern.* ./lib
        fi
        ls -lR

    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: opencvsharp-${{ matrix.os }}-${{ matrix.arch }}
        path: artifacts